= At its most basic
Tom Marks <thomas.o.marks@gmail.com>
v0.1, 2017-12-19

To understand what Cython does it's easiest to start by looking at how turn a _Python Module_ into a compiled _Extension Module_. The _Extension Module_ can be imported just at the _Python Module_ is.

== Create a simple _Python Module_

To start create the following `hello.py` file in an empty directory:

**hello.py**
```
print 'hello world'

```

Obverse that this is the only file:
```
$ ls -1

hello.py
```

== Turn a _Python Module_ into a C compiled _Extension Module_

Now `Cythonize` the `hello.py` module using the `--inplace` flag to build the _Extension Module_ as _shared object_ in the same path as the source file.
Observe that a `hello.c` intermediary is created which is compiled into the `hello.so` shared object.

```
$ cythonize --inplace hello.py
Compiling /tmp/tmp.iQ8pjSOIDu/hello.py because it changed.
[1/1] Cythonizing /tmp/tmp.iQ8pjSOIDu/hello.py
running build_ext
building 'hello' extension
creating /tmp/tmp.iQ8pjSOIDu/tmptejda7/tmp
creating /tmp/tmp.iQ8pjSOIDu/tmptejda7/tmp/tmp.iQ8pjSOIDu
gcc -pthread -fno-strict-aliasing -march=x86-64 -mtune=generic -O2 -pipe -fstack-protector-strong -fno-plt -DNDEBUG -march=x86-64 -mtune=generic -O2 -pipe -fstack-protector-strong -fno-plt -fPIC -I/usr/include/python2.7 -c /tmp/tmp.iQ8pjSOIDu/hello.c -o /tmp/tmp.iQ8pjSOIDu/tmptejda7/tmp/tmp.iQ8pjSOIDu/hello.o
gcc -pthread -shared -Wl,-O1,--sort-common,--as-needed,-z,relro,-z,now /tmp/tmp.iQ8pjSOIDu/tmptejda7/tmp/tmp.iQ8pjSOIDu/hello.o -L/usr/lib -lpython2.7 -o /tmp/tmp.iQ8pjSOIDu/hello.so
```

```
$ ls -1

hello.c
hello.py
hello.so
```

== Observe that Python imports the _Extension Module_

Start the Python interpreter and import the `hello` module. We should see that Python is using the newly created `hello.so` shared object.
```
$ python
Python 2.7.14 (default, Sep 20 2017, 01:25:59)
[GCC 7.2.0] on linux2
Type "help", "copyright", "credits" or "license" for more information.
>>> import hello
hello world
>>> hello.__file__
'hello.so'
```

== A slighly deep understanding of what is actually going on

Python makes it farily easyfootnote:[https://docs.python.org/2/extending/extending.html] to add new built-in modules as long as you can program in C/C++ (or other possible Golang, Rust, etc ...).

Cython takes this one step further and generates C code from Python code. Whilst it may not achieve the top end performance of hand crafted C code, you do get to leverage Python syntax a productive coding idioms.

Compiling Python without using any of the additional annotations and static typing can provide speed gains of 20%-50% footnote:[http://cython.readthedocs.io/en/latest/src/tutorial/pure.html]

Adding Cython type annotations via various mechanisms can improve upon this.

Lastly for _Extension Modules_ can be code using the Cython language which is a superset of Python.